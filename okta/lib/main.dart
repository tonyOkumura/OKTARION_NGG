import 'dart:async';

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/date_symbol_data_local.dart';

import 'app.dart';
import 'core/core.dart';
import 'core/services/theme_service.dart';

void main() async {
  // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  runZonedGuarded(() async {
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Flutter bindings
    WidgetsFlutterBinding.ensureInitialized();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    LogService.i('üåç Initializing Russian locale...');
    await initializeDateFormatting('ru', null);
    LogService.i('‚úÖ Russian locale initialized successfully');
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    LogService.i('üöÄ Starting ${AppConstants.appName} v${AppConstants.appVersion}');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hive
      LogService.i('üì¶ Initializing Hive storage...');
      await HiveService.instance.init();
      LogService.i('‚úÖ Hive storage initialized successfully');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ–º
      LogService.i('üé® Initializing ThemeService...');
      await Get.putAsync(() => ThemeService().init());
      LogService.i('‚úÖ ThemeService initialized successfully');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
      LogService.i('üîó Initializing Supabase...');
      await SupabaseService.instance.init();
      LogService.i('‚úÖ Supabase initialized successfully');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
      LogService.i('üîç Checking Supabase connection...');
      final isConnected = await SupabaseService.instance.checkConnection();
      if (isConnected) {
        LogService.i('‚úÖ Supabase connection verified');
      } else {
        LogService.w('‚ö†Ô∏è Supabase connection check failed, but continuing...');
      }
      
      // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      LogService.i('üéØ Launching OktarionApp...');
      runApp(const OktarionApp());
      
      LogService.i('‚úÖ Application launched successfully with theme: ${Get.find<ThemeService>().currentTheme.value.name}');
      
    } catch (e, stackTrace) {
      LogService.e('‚ùå Failed to initialize application: $e', e, stackTrace);
      ErrorLogService.logCriticalError('Application Initialization', e, stackTrace: stackTrace);
      rethrow;
    }
  }, (error, stackTrace) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    LogService.e('üö® Uncaught error: $error', error, stackTrace);
    ErrorLogService.logCriticalError('Uncaught Error', error, stackTrace: stackTrace);
    debugPrint('Uncaught error: $error');
    debugPrint('Stack trace: $stackTrace');
  });
}

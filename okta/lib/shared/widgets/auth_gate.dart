import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:okta/app/modules/home/bindings/main_binding.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import '../../core/core.dart';
import '../../app/modules/splash/views/splash_view.dart';
import '../../app/modules/home/views/main_view.dart';
import '../../app/modules/login/views/login_view.dart';
import '../../app/modules/login/views/email_confirmation_view.dart';
import '../../app/modules/login/bindings/login_binding.dart';
import '../../app/modules/login/controllers/login_controller.dart';
import '../../app/modules/home/controllers/main_controller.dart';

/// AuthGate - –≤–∏–¥–∂–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É Splash, Login –∏ Home —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
class AuthGate extends StatefulWidget {
  const AuthGate({super.key});

  @override
  State<AuthGate> createState() => _AuthGateState();
}

class _AuthGateState extends State<AuthGate> {
  bool _isInitializing = true;

  @override
  void initState() {
    super.initState();
    _initializeApp();
  }

  Future<void> _initializeApp() async {
    try {
      LogService.i('üöÄ Initializing AuthGate...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      final currentUser = SupabaseService.instance.currentUser;
      LogService.i('üîç Current user on init: ${currentUser?.email ?? 'No user'}');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º splash —ç–∫—Ä–∞–Ω –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
      await Future.delayed(const Duration(seconds: 2));
      
      if (mounted) {
        setState(() {
          _isInitializing = false;
        });
        LogService.i('‚úÖ AuthGate initialization completed');
      }
    } catch (e, stackTrace) {
      LogService.e('‚ùå AuthGate initialization failed: $e', e, stackTrace);
      if (mounted) {
        setState(() {
          _isInitializing = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º splash —ç–∫—Ä–∞–Ω –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (_isInitializing) {
      return const SplashView();
    }

    return StreamBuilder<AuthState>(
      stream: SupabaseService.instance.authStateChanges,
      builder: (context, snapshot) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Splash –ø–æ–∫–∞ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const SplashView();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        final authState = snapshot.data;
        final isAuthenticated = authState?.session != null;
        final user = authState?.session?.user;
        final isEmailConfirmed = user?.emailConfirmedAt != null;

        LogService.i('üîê AuthGate: User ${isAuthenticated ? 'authenticated' : 'not authenticated'}');
        LogService.i('üîê AuthGate: AuthState: ${authState?.event}');
        LogService.i('üîê AuthGate: Session: ${user?.email ?? 'No user'}');
        LogService.i('üîê AuthGate: Email confirmed: $isEmailConfirmed');

        if (isAuthenticated && user != null && isEmailConfirmed) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Home
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–Ω–¥–∏–Ω–≥ –¥–ª—è MainController
          if (!Get.isRegistered<MainController>()) {
            MainBinding().dependencies();
          }
          return const MainView();
        } else if (isAuthenticated && user != null && !isEmailConfirmed) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–Ω–¥–∏–Ω–≥ –¥–ª—è LoginController
          if (!Get.isRegistered<LoginController>()) {
            LoginBinding().dependencies();
          }
          return const EmailConfirmationView();
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Login
          // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
          if (Get.isRegistered<MainController>()) {
            Get.delete<MainController>();
          }
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–Ω–¥–∏–Ω–≥ –¥–ª—è LoginController
          if (!Get.isRegistered<LoginController>()) {
            LoginBinding().dependencies();
          }
          return const LoginView();
        }
      },
    );
  }
}

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import '../../../../core/core.dart';
import '../../../../core/services/theme_service.dart';

class LoginController extends GetxController {
  final emailController = TextEditingController();
  final passwordController = TextEditingController();
  final formKey = GlobalKey<FormState>();
  
  final isLoading = false.obs;
  final isPasswordVisible = false.obs;
  final isRegisterMode = false.obs;
  final errorText = Rxn<String>();
  final now = DateTime.now().obs;
  final seconds = 0.obs;
  
  late final ThemeService _themeService;
  
  // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
  final passwordStrength = 0.0.obs;
  final passwordStrengthText = ''.obs;
  final passwordStrengthColor = Rx<Color>(Colors.grey);
  
  // –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
  final isFormValid = false.obs;


  @override
  void onInit() {
    super.onInit();
    _themeService = Get.find<ThemeService>();
    LogService.i('üîê LoginController initialized');
    
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    _startTimer();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É —á–µ—Ä–µ–∑ ThemeService
  Color _getAccentColor(int index) {
    return AccentColorsHelper.getAccentColorByIndexFromTheme(_themeService.themeData, index);
  }

  @override
  void onReady() {
    super.onReady();
  }

  @override
  void onClose() {
    emailController.dispose();
    passwordController.dispose();
    super.onClose();
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  void _startTimer() {
    Timer.periodic(const Duration(seconds: 1), (timer) {
      final currentTime = DateTime.now();
      now.value = currentTime;
      seconds.value = currentTime.second;
    });
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
  void togglePasswordVisibility() {
    isPasswordVisible.value = !isPasswordVisible.value;
  }

  /// –û—Ü–µ–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
  void evaluatePassword(String password) {
    if (password.isEmpty) {
      passwordStrength.value = 0.0;
      passwordStrengthText.value = '';
      passwordStrengthColor.value = Colors.grey;
    } else {
      double strength = 0.0;
      String text = '';
      Color color = Colors.grey;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
      if (password.length >= 8) strength += 0.2;
      if (password.length >= 12) strength += 0.1;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
      if (password.contains(RegExp(r'[a-z]'))) strength += 0.1;
      if (password.contains(RegExp(r'[A-Z]'))) strength += 0.1;
      if (password.contains(RegExp(r'[0-9]'))) strength += 0.1;
      if (password.contains(RegExp(r'[!@#$%^&*(),.?":{}|<>]'))) strength += 0.2;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      if (strength < 0.3) {
        text = '–°–ª–∞–±—ã–π';
        color = Colors.red;
      } else if (strength < 0.6) {
        text = '–°—Ä–µ–¥–Ω–∏–π';
        color = Colors.orange;
      } else if (strength < 0.8) {
        text = '–•–æ—Ä–æ—à–∏–π';
        color = Colors.blue;
      } else {
        text = '–û—Ç–ª–∏—á–Ω—ã–π';
        color = Colors.green;
      }

      passwordStrength.value = strength;
      passwordStrengthText.value = text;
      passwordStrengthColor.value = color;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
    _checkFormValidity();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
  void _checkFormValidity() {
    final email = emailController.text.trim();
    final password = passwordController.text;
    
    bool isValid = email.isNotEmpty && password.isNotEmpty;
    
    if (isRegisterMode.value) {
      // –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–º
      isValid = isValid && passwordStrength.value >= 0.3;
    }
    
    isFormValid.value = isValid;
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞
  void toggleRegisterMode() {
    isRegisterMode.value = !isRegisterMode.value;
    errorText.value = null; // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    _checkFormValidity(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è email
  void onEmailChanged(String email) {
    _checkFormValidity();
  }

  /// –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<void> signIn() async {
    if (formKey.currentState == null || !formKey.currentState!.validate()) return;

    try {
      isLoading.value = true;
      errorText.value = null;
      LogService.i('üîê Attempting to sign in...');

      final response = await SupabaseService.instance.client.auth.signInWithPassword(
        email: emailController.text.trim(),
        password: passwordController.text,
      );

      if (response.user != null) {
        LogService.i('‚úÖ Successfully signed in: ${response.user!.email}');
        
        NotificationService.instance.showSuccess(
          title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
          message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
          color: _getAccentColor(3),
        );
      } else {
        throw Exception('No user returned from sign in');
      }

    } on AuthException catch (e) {
      LogService.e('‚ùå Auth error during sign in: ${e.message}', e);
      
      String errorMessage;
      switch (e.message) {
        case 'Invalid login credentials':
          errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
          break;
        case 'Email not confirmed':
          errorMessage = 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É';
          break;
        case 'Too many requests':
          errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
          break;
        default:
          errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${e.message}';
      }
      
      errorText.value = errorMessage;
      
      NotificationService.instance.showError(
        title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
        message: errorMessage,
        color: _getAccentColor(0),
      );
    } catch (e, stackTrace) {
      LogService.e('‚ùå Unexpected error during sign in: $e', e, stackTrace);
      
      errorText.value = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
      
      NotificationService.instance.showError(
        title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
        color: _getAccentColor(0),
      );
    } finally {
      isLoading.value = false;
    }
  }

  /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
  Future<void> signUp() async {
    if (formKey.currentState == null || !formKey.currentState!.validate()) return;

    try {
      isLoading.value = true;
      errorText.value = null;
      LogService.i('üìù Attempting to sign up...');

      final response = await SupabaseService.instance.client.auth.signUp(
        email: emailController.text.trim(),
        password: passwordController.text,
      );

      if (response.user != null) {
        LogService.i('‚úÖ Successfully signed up: ${response.user!.email}');
        
        
        NotificationService.instance.showSuccess(
          title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!',
          message: response.session != null 
              ? '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
              : '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞',
          color: _getAccentColor(3),
        );
      } else {
        throw Exception('No user returned from sign up');
      }

    } on AuthException catch (e) {
      LogService.e('‚ùå Auth error during sign up: ${e.message}', e);
      
      String errorMessage;
      switch (e.message) {
        case 'User already registered':
          errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω';
          break;
        case 'Password should be at least 6 characters':
          errorMessage = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
          break;
        case 'Invalid email':
          errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
          break;
        case 'Signup is disabled':
          errorMessage = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞';
          break;
        default:
          errorMessage = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${e.message}';
      }
      
      errorText.value = errorMessage;
      
      NotificationService.instance.showError(
        title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        message: errorMessage,
        color: _getAccentColor(0),
      );
    } catch (e, stackTrace) {
      LogService.e('‚ùå Unexpected error during sign up: $e', e, stackTrace);
      
      errorText.value = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
      
      NotificationService.instance.showError(
        title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
        color: _getAccentColor(0),
      );
    } finally {
      isLoading.value = false;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É (–≤—Ö–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
  void submitForm(GlobalKey<FormState> formKey) {
    if (isRegisterMode.value) {
      signUp();
    } else {
      signIn();
    }
  }

 
  /// –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> signOut() async {
    try {
      LogService.i('üö™ Signing out...');
      
      await SupabaseService.instance.signOut();
      
      LogService.i('‚úÖ Successfully signed out');
      
      NotificationService.instance.showInfo(
        title: '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
        message: '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
        color: _getAccentColor(2),
      );

    } catch (e, stackTrace) {
      LogService.e('‚ùå Sign out failed: $e', e, stackTrace);
      
      NotificationService.instance.showError(
        title: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
        color: _getAccentColor(0),
      );
    }
  }

  /// –í–æ–π—Ç–∏ –∫–∞–∫ –≥–æ—Å—Ç—å (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  Future<void> signInAsGuest() async {
    try {
      isLoading.value = true;
      LogService.i('üë§ Signing in as guest...');

      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
      await Future.delayed(const Duration(seconds: 1));
      
      LogService.i('‚úÖ Successfully signed in as guest');
      
      NotificationService.instance.showInfo(
        title: '–ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º',
        message: '–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –≥–æ—Å—Ç—å',
        color: _getAccentColor(2),
      );

    } catch (e, stackTrace) {
      LogService.e('‚ùå Guest sign in failed: $e', e, stackTrace);
      
      NotificationService.instance.showError(
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ –≥–æ—Å—Ç—å',
        color: _getAccentColor(0),
      );
    } finally {
      isLoading.value = false;
    }
  }
}

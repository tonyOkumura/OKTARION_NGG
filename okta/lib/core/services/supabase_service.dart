import 'package:supabase_flutter/supabase_flutter.dart';

import '../constants/app_constants.dart';
import '../utils/log_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase
class SupabaseService {
  SupabaseService._();

  static final SupabaseService _instance = SupabaseService._();
  static SupabaseService get instance => _instance;

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase
  SupabaseClient get client => Supabase.instance.client;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
  Future<void> init() async {
    try {
      LogService.i('üîó Initializing Supabase...');
      
      await Supabase.initialize(
        url: AppConstants.supabaseUrl,
        anonKey: AppConstants.supabaseAnonKey,
        debug: AppConstants.isDebugMode,
      );
      
      LogService.i('‚úÖ Supabase initialized successfully');
      LogService.i('üîó Supabase URL: ${AppConstants.supabaseUrl}');
      
    } catch (e, stackTrace) {
      LogService.e('‚ùå Failed to initialize Supabase: $e', e, stackTrace);
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
  Future<bool> checkConnection() async {
    try {
      LogService.i('üîç Checking Supabase connection...');
      
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ auth
      // –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await client.auth.getUser();
      
      LogService.i('‚úÖ Supabase connection is healthy');
      LogService.i('üîó Connected to: ${AppConstants.supabaseUrl}');
      return true;
      
    } catch (e) {
      LogService.w('‚ö†Ô∏è Supabase connection check failed: $e');
      LogService.w('üîó Failed to connect to: ${AppConstants.supabaseUrl}');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  User? get currentUser => client.auth.currentUser;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  bool get isAuthenticated => currentUser != null;

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Session? get currentSession => client.auth.currentSession;

  /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Stream<AuthState> get authStateChanges => client.auth.onAuthStateChange;

  /// –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> signOut() async {
    try {
      LogService.i('üö™ Signing out from Supabase...');
      await client.auth.signOut();
      LogService.i('‚úÖ Successfully signed out');
    } catch (e, stackTrace) {
      LogService.e('‚ùå Failed to sign out: $e', e, stackTrace);
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Supabase
  Map<String, dynamic> getSupabaseInfo() {
    return {
      'url': AppConstants.supabaseUrl,
      'isLocal': AppConstants.supabaseUrl.contains('localhost'),
      'isInitialized': true,
      'isAuthenticated': isAuthenticated,
      'currentUser': currentUser?.email ?? 'Not authenticated',
      'sessionExists': currentSession != null,
    };
  }
}

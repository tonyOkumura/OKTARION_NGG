#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ Docker –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OKTARION NGG
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: $(date)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./cleanup.sh [—Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏] [—Å–µ—Ä–≤–∏—Å—ã...]
# –ü—Ä–∏–º–µ—Ä—ã: 
#   ./cleanup.sh containers              # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
#   ./cleanup.sh images                  # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã
#   ./cleanup.sh volumes                 # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ volumes
#   ./cleanup.sh networks                # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ç–∏
#   ./cleanup.sh all                     # –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ
#   ./cleanup.sh containers contact      # —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã contact
#   ./cleanup.sh images contact event    # —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑—ã contact –∏ event

set -e

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏
CLEANUP_TYPES=("containers" "images" "volumes" "networks" "builds" "all")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
AVAILABLE_SERVICES=("contact" "conversation" "message" "task" "event" "tools" "supabase" "cache")

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${PURPLE}üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OKTARION NGG${NC}"
    echo "=============================================="
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [—Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏] [—Å–µ—Ä–≤–∏—Å—ã...]"
    echo ""
    echo -e "${CYAN}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏:${NC}"
    for cleanup_type in "${CLEANUP_TYPES[@]}"; do
        echo "  ‚Ä¢ $cleanup_type"
    done
    echo ""
    echo -e "${CYAN}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"
    for service in "${AVAILABLE_SERVICES[@]}"; do
        echo "  ‚Ä¢ $service"
    done
    echo ""
    echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo "  $0 containers              # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "  $0 images                  # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã"
    echo "  $0 volumes                 # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ volumes"
    echo "  $0 networks                # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ç–∏"
    echo "  $0 builds                  # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ build –∫—ç—à–∏"
    echo "  $0 all                     # –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ"
    echo "  $0 containers contact      # —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã contact"
    echo "  $0 images contact event    # —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑—ã contact –∏ event"
    echo ""
    echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!${NC}"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—á–∏—Å—Ç–∫–∏
if [ $# -eq 0 ]; then
    error "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –æ—á–∏—Å—Ç–∫–∏"
    show_help
    exit 1
fi

CLEANUP_TYPE="$1"
shift

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ—á–∏—Å—Ç–∫–∏
if [[ ! " ${CLEANUP_TYPES[*]} " =~ " $CLEANUP_TYPE " ]]; then
    error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—á–∏—Å—Ç–∫–∏: $CLEANUP_TYPE"
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: ${CLEANUP_TYPES[*]}"
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –æ—á–∏—Å—Ç–∏—Ç—å
if [ $# -eq 0 ]; then
    # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
    SERVICES_TO_CLEANUP=("${AVAILABLE_SERVICES[@]}")
    echo -e "${PURPLE}üßπ –û—á–∏—Å—Ç–∫–∞ $CLEANUP_TYPE –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
else
    SERVICES_TO_CLEANUP=()
    for arg in "$@"; do
        if [[ "$arg" == "all" ]]; then
            SERVICES_TO_CLEANUP=("${AVAILABLE_SERVICES[@]}")
            break
        elif [[ " ${AVAILABLE_SERVICES[*]} " =~ " $arg " ]]; then
            SERVICES_TO_CLEANUP+=("$arg")
        else
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $arg"
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${AVAILABLE_SERVICES[*]}"
            exit 1
        fi
    done
fi

echo -e "${PURPLE}üßπ –û—á–∏—Å—Ç–∫–∞ $CLEANUP_TYPE –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤: ${SERVICES_TO_CLEANUP[*]}${NC}"
echo "=========================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
get_container_name() {
    local service=$1
    case $service in
        "contact") echo "contact_microservice" ;;
        "conversation") echo "conversation_microservice" ;;
        "message") echo "message_microservice" ;;
        "task") echo "task_microservice" ;;
        "event") echo "event_microservice" ;;
        "tools") echo "hoppscotch" ;; # –ü—Ä–∏–º–µ—Ä –¥–ª—è tools
        "supabase") echo "supabase-studio" ;; # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Supabase
        "cache") echo "cache_db" ;; # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Redis
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –æ–±—Ä–∞–∑–∞
get_image_name() {
    local service=$1
    case $service in
        "contact") echo "contact_micro-contact-service" ;;
        "conversation") echo "conversation_micro-conversation-service" ;;
        "message") echo "message_micro-message-service" ;;
        "task") echo "task_micro-task-service" ;;
        "event") echo "event_micro-event-service" ;;
        "tools") echo "hoppscotch" ;; # –ü—Ä–∏–º–µ—Ä –¥–ª—è tools
        "supabase") echo "supabase/studio" ;; # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–∑ Supabase
        "cache") echo "redis" ;; # –û–±—Ä–∞–∑ Redis
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ volume
get_volume_name() {
    local service=$1
    case $service in
        "contact") echo "contact_postgres_data" ;;
        "conversation") echo "conversation_postgres_data" ;;
        "message") echo "message_postgres_data" ;;
        "task") echo "task_postgres_data" ;;
        "event") echo "event_postgres_data" ;;
        "tools") echo "hoppscotch_data" ;; # –ü—Ä–∏–º–µ—Ä –¥–ª—è tools
        "supabase") echo "supabase_db_data" ;; # Volume –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Supabase
        "cache") echo "cache_data" ;; # Volume –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Redis
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–µ—Ç–∏
get_network_name() {
    local service=$1
    case $service in
        "contact") echo "oktarion_contacts_net" ;;
        "conversation") echo "oktarion_conversations_net" ;;
        "message") echo "oktarion_messages_net" ;;
        "task") echo "oktarion_tasks_net" ;;
        "event") echo "oktarion_events_net" ;;
        "tools") echo "oktarion_ngg" ;; # –û–±—â–∞—è —Å–µ—Ç—å
        "supabase") echo "supabase_default" ;; # –°–µ—Ç—å Supabase
        "cache") echo "oktarion_ngg" ;; # –û–±—â–∞—è —Å–µ—Ç—å
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
cleanup_containers() {
    local services=("$@")
    
    log "–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    for service in "${services[@]}"; do
        local container_name=$(get_container_name "$service")
        local service_name=""
        
        case $service in
            "contact") service_name="Contact" ;;
            "conversation") service_name="Conversation" ;;
            "message") service_name="Message" ;;
            "task") service_name="Task" ;;
            "event") service_name="Event" ;;
            "tools") service_name="Tools" ;;
            "supabase") service_name="Supabase" ;;
            "cache") service_name="Cache" ;;
        esac
        
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ $service_name..."
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏
        if docker ps -a --format "{{.Names}}" | grep -q "^${container_name}$"; then
            docker stop "$container_name" 2>/dev/null || true
            docker rm "$container_name" 2>/dev/null || true
            success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name —É–¥–∞–ª–µ–Ω"
        else
            info "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        local pattern="${service}_microservice"
        if docker ps -a --format "{{.Names}}" | grep -q "$pattern"; then
            docker stop $(docker ps -a -q --filter "name=$pattern") 2>/dev/null || true
            docker rm $(docker ps -a -q --filter "name=$pattern") 2>/dev/null || true
            success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã $pattern —É–¥–∞–ª–µ–Ω—ã"
        fi
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ë–î
        local db_pattern="${service}_postgres"
        if docker ps -a --format "{{.Names}}" | grep -q "$db_pattern"; then
            docker stop $(docker ps -a -q --filter "name=$db_pattern") 2>/dev/null || true
            docker rm $(docker ps -a -q --filter "name=$db_pattern") 2>/dev/null || true
            success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ë–î $db_pattern —É–¥–∞–ª–µ–Ω—ã"
        fi
    done
    
    success "–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–∑–æ–≤
cleanup_images() {
    local services=("$@")
    
    log "–û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
    
    for service in "${services[@]}"; do
        local image_name=$(get_image_name "$service")
        local service_name=""
        
        case $service in
            "contact") service_name="Contact" ;;
            "conversation") service_name="Conversation" ;;
            "message") service_name="Message" ;;
            "task") service_name="Task" ;;
            "event") service_name="Event" ;;
            "tools") service_name="Tools" ;;
            "supabase") service_name="Supabase" ;;
            "cache") service_name="Cache" ;;
        esac
        
        log "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ $service_name..."
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –ø–æ –∏–º–µ–Ω–∏
        if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "$image_name"; then
            docker rmi $(docker images -q "$image_name") 2>/dev/null || true
            success "–û–±—Ä–∞–∑—ã $image_name —É–¥–∞–ª–µ–Ω—ã"
        else
            info "–û–±—Ä–∞–∑—ã $image_name –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        local pattern="${service}_micro"
        if docker images --format "{{.Repository}}" | grep -q "$pattern"; then
            docker rmi $(docker images -q --filter "reference=$pattern*") 2>/dev/null || true
            success "–û–±—Ä–∞–∑—ã $pattern —É–¥–∞–ª–µ–Ω—ã"
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ dangling –æ–±—Ä–∞–∑–æ–≤
    log "–£–¥–∞–ª–µ–Ω–∏–µ dangling –æ–±—Ä–∞–∑–æ–≤..."
    if docker images -f "dangling=true" -q | grep -q .; then
        docker rmi $(docker images -f "dangling=true" -q) 2>/dev/null || true
        success "Dangling –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã"
    else
        info "Dangling –æ–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    success "–û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ volumes
cleanup_volumes() {
    local services=("$@")
    
    log "–û—á–∏—Å—Ç–∫–∞ volumes..."
    
    for service in "${services[@]}"; do
        local volume_name=$(get_volume_name "$service")
        local service_name=""
        
        case $service in
            "contact") service_name="Contact" ;;
            "conversation") service_name="Conversation" ;;
            "message") service_name="Message" ;;
            "task") service_name="Task" ;;
            "event") service_name="Event" ;;
            "tools") service_name="Tools" ;;
            "supabase") service_name="Supabase" ;;
            "cache") service_name="Cache" ;;
        esac
        
        log "–£–¥–∞–ª–µ–Ω–∏–µ volumes $service_name..."
        
        # –£–¥–∞–ª–µ–Ω–∏–µ volumes –ø–æ –∏–º–µ–Ω–∏
        if docker volume ls --format "{{.Name}}" | grep -q "^${volume_name}$"; then
            docker volume rm "$volume_name" 2>/dev/null || true
            success "Volume $volume_name —É–¥–∞–ª–µ–Ω"
        else
            info "Volume $volume_name –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        # –£–¥–∞–ª–µ–Ω–∏–µ volumes –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        local pattern="${service}_"
        if docker volume ls --format "{{.Name}}" | grep -q "$pattern"; then
            docker volume rm $(docker volume ls -q --filter "name=$pattern") 2>/dev/null || true
            success "Volumes $pattern —É–¥–∞–ª–µ–Ω—ã"
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes
    log "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes..."
    if docker volume ls -f "dangling=true" -q | grep -q .; then
        docker volume rm $(docker volume ls -f "dangling=true" -q) 2>/dev/null || true
        success "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes —É–¥–∞–ª–µ–Ω—ã"
    else
        info "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    success "–û—á–∏—Å—Ç–∫–∞ volumes –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ç–µ–π
cleanup_networks() {
    local services=("$@")
    
    log "–û—á–∏—Å—Ç–∫–∞ —Å–µ—Ç–µ–π..."
    
    for service in "${services[@]}"; do
        local network_name=$(get_network_name "$service")
        local service_name=""
        
        case $service in
            "contact") service_name="Contact" ;;
            "conversation") service_name="Conversation" ;;
            "message") service_name="Message" ;;
            "task") service_name="Task" ;;
            "event") service_name="Event" ;;
            "tools") service_name="Tools" ;;
            "supabase") service_name="Supabase" ;;
            "cache") service_name="Cache" ;;
        esac
        
        log "–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ $service_name..."
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –ø–æ –∏–º–µ–Ω–∏
        if docker network ls --format "{{.Name}}" | grep -q "^${network_name}$"; then
            docker network rm "$network_name" 2>/dev/null || true
            success "–°–µ—Ç—å $network_name —É–¥–∞–ª–µ–Ω–∞"
        else
            info "–°–µ—Ç—å $network_name –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        local pattern="oktarion_${service}"
        if docker network ls --format "{{.Name}}" | grep -q "$pattern"; then
            docker network rm $(docker network ls -q --filter "name=$pattern") 2>/dev/null || true
            success "–°–µ—Ç–∏ $pattern —É–¥–∞–ª–µ–Ω—ã"
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π
    log "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π..."
    if docker network ls --filter "type=custom" -q | grep -q .; then
        docker network prune -f 2>/dev/null || true
        success "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã"
    else
        info "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    success "–û—á–∏—Å—Ç–∫–∞ —Å–µ—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ build –∫—ç—à–µ–π
cleanup_builds() {
    log "–û—á–∏—Å—Ç–∫–∞ build –∫—ç—à–µ–π..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ build –∫—ç—à–∞
    docker builder prune -f 2>/dev/null || true
    success "Build –∫—ç—à —É–¥–∞–ª–µ–Ω"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö build –∫—ç—à–µ–π
    docker builder prune -a -f 2>/dev/null || true
    success "–í—Å–µ build –∫—ç—à–∏ —É–¥–∞–ª–µ–Ω—ã"
    
    success "–û—á–∏—Å—Ç–∫–∞ build –∫—ç—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
cleanup_all() {
    local services=("$@")
    
    log "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker stop $(docker ps -q) 2>/dev/null || true
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    cleanup_containers "${services[@]}"
    cleanup_images "${services[@]}"
    cleanup_volumes "${services[@]}"
    cleanup_networks "${services[@]}"
    cleanup_builds
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    log "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
    docker system prune -a -f --volumes 2>/dev/null || true
    success "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    
    success "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
case $CLEANUP_TYPE in
    "containers")
        cleanup_containers "${SERVICES_TO_CLEANUP[@]}"
        ;;
    "images")
        cleanup_images "${SERVICES_TO_CLEANUP[@]}"
        ;;
    "volumes")
        cleanup_volumes "${SERVICES_TO_CLEANUP[@]}"
        ;;
    "networks")
        cleanup_networks "${SERVICES_TO_CLEANUP[@]}"
        ;;
    "builds")
        cleanup_builds
        ;;
    "all")
        cleanup_all "${SERVICES_TO_CLEANUP[@]}"
        ;;
esac

echo ""
echo -e "${CYAN}üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:${NC}"
echo "================================"

# –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo -e "${YELLOW}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" 2>/dev/null || echo "–ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

echo ""
echo -e "${YELLOW}–û–±—Ä–∞–∑—ã:${NC}"
docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" 2>/dev/null || echo "–ù–µ—Ç –æ–±—Ä–∞–∑–æ–≤"

echo ""
echo -e "${YELLOW}Volumes:${NC}"
docker volume ls --format "table {{.Name}}\t{{.Driver}}" 2>/dev/null || echo "–ù–µ—Ç volumes"

echo ""
echo -e "${YELLOW}–°–µ—Ç–∏:${NC}"
docker network ls --format "table {{.Name}}\t{{.Driver}}\t{{.Scope}}" 2>/dev/null || echo "–ù–µ—Ç —Å–µ—Ç–µ–π"

echo ""
success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üßπ‚ú®"

#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ OKTARION NGG
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: $(date)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./start-all.sh [–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã...]
# –ü—Ä–∏–º–µ—Ä—ã: 
#   ./start-all.sh                    # –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ
#   ./start-all.sh contact event      # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ contact –∏ event
#   ./start-all.sh all                # –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
#   ./start-all.sh tools              # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

set -e

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
AVAILABLE_SERVICES=("contact" "conversation" "message" "task" "event" "tools")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ OKTARION NGG"
    echo "==============================="
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã...]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã:"
    for service in "${AVAILABLE_SERVICES[@]}"; do
        echo "  ‚Ä¢ $service"
    done
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                    # –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ"
    echo "  $0 contact event      # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ contact –∏ event"
    echo "  $0 all                # –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã"
    echo "  $0 tools              # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å
if [ $# -eq 0 ]; then
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ
    SERVICES_TO_START=("${AVAILABLE_SERVICES[@]}")
    echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ OKTARION NGG..."
else
    SERVICES_TO_START=()
    for arg in "$@"; do
        if [[ "$arg" == "all" ]]; then
            SERVICES_TO_START=("${AVAILABLE_SERVICES[@]}")
            break
        elif [[ " ${AVAILABLE_SERVICES[*]} " =~ " $arg " ]]; then
            SERVICES_TO_START+=("$arg")
        else
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $arg"
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${AVAILABLE_SERVICES[*]}"
            exit 1
        fi
    done
fi

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: ${SERVICES_TO_START[*]}"
echo "=========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
create_network_if_not_exists() {
    local network_name=$1
    if ! docker network ls | grep -q "$network_name"; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ $network_name..."
        docker network create "$network_name"
        success "–°–µ—Ç—å $network_name —Å–æ–∑–¥–∞–Ω–∞"
    else
        success "–°–µ—Ç—å $network_name —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker Compose
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã docker-compose
if docker compose version &> /dev/null; then
    COMPOSE_CMD="docker compose"
else
    COMPOSE_CMD="docker-compose"
fi

log "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: $COMPOSE_CMD"

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ç–µ–π
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ç–µ–π..."

# –û–±—â–∞—è —Å–µ—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
create_network_if_not_exists "oktarion_ngg"

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ—Ç–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞–µ–º—ã—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
for service in "${SERVICES_TO_START[@]}"; do
    case $service in
        "contact")
            create_network_if_not_exists "oktarion_contacts_net"
            ;;
        "conversation")
            create_network_if_not_exists "oktarion_conversations_net"
            ;;
        "message")
            create_network_if_not_exists "oktarion_messages_net"
            ;;
        "task")
            create_network_if_not_exists "oktarion_tasks_net"
            ;;
        "event")
            create_network_if_not_exists "oktarion_events_net"
            ;;
    esac
done

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
start_service() {
    local service=$1
    local service_name=""
    local service_dir=""
    
    case $service in
        "contact")
            service_name="Contact"
            service_dir="$(dirname "$0")/../business_micros/contact_micro"
            ;;
        "conversation")
            service_name="Conversation"
            service_dir="$(dirname "$0")/../business_micros/conversation_micro"
            ;;
        "message")
            service_name="Message"
            service_dir="$(dirname "$0")/../business_micros/message_micro"
            ;;
        "task")
            service_name="Task"
            service_dir="$(dirname "$0")/../business_micros/task_micro"
            ;;
        "event")
            service_name="Event"
            service_dir="$(dirname "$0")/../business_micros/event_micro"
            ;;
        "tools")
            service_name="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
            service_dir="$(dirname "$0")/../tools"
            ;;
    esac
    
    log "–ó–∞–ø—É—Å–∫ $service_name..."
    cd "$service_dir"
    $COMPOSE_CMD up -d
    
    if [ $? -eq 0 ]; then
        success "$service_name –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ $service_name"
        return 1
    fi
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd - > /dev/null
}

# –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
for service in "${SERVICES_TO_START[@]}"; do
    start_service "$service"
done

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
echo "====================="

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏ oktarion_ngg
docker ps --filter "network=oktarion_ngg" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "===================="

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
for service in "${SERVICES_TO_START[@]}"; do
    case $service in
        "tools")
            echo "‚Ä¢ Hoppscotch API Testing: http://localhost:3100"
            echo "‚Ä¢ Hoppscotch Admin: http://localhost:3101"
            echo "‚Ä¢ pgAdmin: http://localhost:5050 (admin@admin.com / admin)"
            echo "‚Ä¢ Portainer: http://localhost:9001"
            echo "‚Ä¢ Dozzle (–ª–æ–≥–∏): http://localhost:9999"
            ;;
        "contact")
            echo "‚Ä¢ Contact Microservice: http://localhost:8040"
            echo "‚Ä¢ Contact DB (PostgreSQL): localhost:5432"
            ;;
        "conversation")
            echo "‚Ä¢ Conversation Microservice: http://localhost:8042"
            echo "‚Ä¢ Conversation DB (PostgreSQL): localhost:5434"
            ;;
        "message")
            echo "‚Ä¢ Message Microservice: http://localhost:8044"
            echo "‚Ä¢ Message DB (PostgreSQL): localhost:5435"
            ;;
        "task")
            echo "‚Ä¢ Task Microservice: http://localhost:8046"
            echo "‚Ä¢ Task DB (PostgreSQL): localhost:5436"
            ;;
        "event")
            echo "‚Ä¢ Event Microservice: http://localhost:8048"
            echo "‚Ä¢ Event DB (PostgreSQL): localhost:5440"
            ;;
    esac
done

echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "==================="
echo "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ: ./stop-all.sh"
echo "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker logs <container_name>"
echo "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: docker exec -it contact_postgres psql -U contactuser -d contactdb"

success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! üéâ"
